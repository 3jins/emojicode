🔮 0 1
📻

🌮
  🎨 represents a color.
🌮
🌍 🕊 🎨 🍇
  🍰 r 🚂
  🍰 g 🚂
  🍰 b 🚂
  🍰 a 🚂

  🌮
    Creates a color from the given RGBA. *r*, *g*, *b* and *a* must be a value
    from 0 to 255.
  🌮
  🐈 🆕 🍼 r 🚂 🍼 g 🚂 🍼 b 🚂 🍼 a 🚂 🍇🍉
🍉

🌮 Errors 🌮
🌍 🦃 🥓 🍇
  🌮 Indicates a generic error. 🌮
  🔘⁉️
  🌮 Permission denied 🌮
  🔘 🚧
  🌮 File exists 🌮
  🔘 🗿
  🌮 Not enough space. 🌮
  🔘 🐁
  🌮 Function not supported. 🌮
  🔘 🙅
  🌮 Mathematics argument out of domain of function. 🌮
  🔘 ➗
  🌮 Invalid argument. 🌮
  🔘 🚯
  🌮 Illegal byte sequence. 🌮
  🔘 🛃
  🌮 Result too large. 🌮
  🔘 🗻
  🌮 Operation not permitted. 🌮
  🔘 🚷
🍉

🌮 🖼 represents a bitmap. 🌮
🌍 🐇 🖼 🍇
  🌮 Creates a bitmap from the image at the given path. 🌮
  🐈 🚨🥓 📄 path 🔡 📻 18
  🌮 Creates a bitmap with the given height and width. 🌮
  🐈 🚨🥓 🆕 width 🚂 height 🚂 📻 19
🍉

🌮
  🕉 represents a font. 🕉 can be used in conjunction with
  [🏔🔡](t5535657300.html#cm🔡) to draw texts to a drawing target.
🌮
🌍 🐇 🕉 🍇
  🌮
    Loads a TrueType font from the given path using the FreeType library.

    The *size* parameter determines the size the font will be rendered at,
    specified in pixels. The standard font size is measured in units per EM, if
    you instead want to specify the size as the total height of glyphs in
    pixels, pass it as a negative value.
  🌮
  🐈 🚨🥓 📄 path 🔡 size 🚂 📻 20
🍉

🌮 ⚖ provides values to align text 🌮
🌍 🦃 ⚖ 🍇
  🌮 Aligns text to the left. 🌮
  🔘⬅️
  🌮 Centers the text. 🌮
  🔘↔️
  🌮 Aligns text to the right. 🌮
  🔘➡️
🍉

🌮 🎉 represents an event. You’ll always receive subclasses of this class. 🌮
🌍 🐇 🎉 🍇🍉

🌮 📩 is an event that occurs when a character was typed on the keyboard. 🌮
🌍 🐇 📩 🎉 🍇
  🌮 Returns the keycode associated with this event. 🌮
  🐖 📟 ➡️ 🚂 📻 34
  🌮
    Returns the symbol that was typed. This may be ✨ if the pressed key cannot
    be represented as a symbol, e.g. if an arrow key was pressed.
  🌮
  🐖 🔣 ➡️ 🍬🔣 📻 35
  🌮 Whether the character was repeated. 🌮
  🐖 🔃 ➡️ 👌 📻 36
🍉

🌮 📥 is an event that occurs when a keyboard key was pressed. 🌮
🌍 🐇 📥 🎉 🍇
  🌮 Returns the keycode associated with this event. 🌮
  🐖 📟 ➡️ 🚂 📻 34
🍉

🌮 📤 is an event that occurs when a keyboard key was released. 🌮
🌍 🐇 📤 🎉 🍇
  🌮 Returns the keycode associated with this event. 🌮
  🐖 📟 ➡️ 🚂 📻 34
🍉

🌮 🖱 is a mouse event. You’ll always receive subclasses of this class. 🌮
🌍 🐇 🖱 🎉 🍇
  🌮 Returns the x coordinate. 🌮
  🐖 👉 ➡️ 🚀 📻 37
  🌮 Returns the y coordinate. 🌮
  🐖 👇 ➡️ 🚀 📻 38
🍉

🌮 ❇️ is an event that occurs when one or more mouse axis changed. 🌮
🌍 🐇 ❇️ 🖱 🍇
🍉

🌮 🔛 is an event that occurs when a mouse button was pressed. 🌮
🌍 🐇 🔛 🖱 🍇
🍉

🌮 🔝 is an event that occurs when a mouse button was released. 🌮
🌍 🐇 🔝 🖱 🍇
🍉

🌮 🛎 is an event that occurs for each ⏲ tick. 🌮
🌍 🐇 🛎 🎉 🍇
🍉

🌮 ⏲ represents a timer that sends an event in a specified interval. 🌮
🌍 🐇 ⏲ 🍇
  🌮
    Creates a new, stopped timer that ticks every *seconds* seconds.
    Seconds must be positive.
  🌮
  🐈 🆕 seconds 🚀 📻 21
  🌮
    Starts the timer. From then, the timer's counter will increment at a
    constant rate, and it will begin generating events. Starting a timer that
    is already started does nothing.
  🌮
  🐖 🏁 📻 22
  🌮
    Resume the timer specified. From then, the timer's counter will increment at
    a constant rate, and it will begin generating events. Resuming a timer
    that is already started does nothing. Resuming a stopped timer will not
    reset the timer's counter.
  🌮
  🐖 🚦 📻 23
  🌮
    Stop the timer specified. The timer's counter will stop incrementing and it
    will stop generating events. Stopping a timer that is already stopped does
    nothing.
  🌮
  🐖 ⛔️ 📻 24
🍉

🌮
  🗃 represents an event queue. An 🗃 instance holds events that have been
  generated by event sources that are registered with the queue. Events are
  stored in the order they are generated. Access is in a strictly FIFO
  (first-in-first-out) order.
🌮
🌍 🐇 🗃 🍇
  🌮 Creates a new, empty event queue. 🌮
  🐈 🆕 📻 25
  🌮 Waits for an event and returns it. 🌮
  🐖 ⏳ ➡️ 🎉 📻 26
  🌮 Registers the mouse as an event source. 🌮
  🐖 🖱 📻 27
  🌮 Registers the keyboard as an event source. 🌮
  🐖 ⌨️ 📻 28
  🌮 Registers a ⏲ instance as an event source. 🌮
  🐖 ⏲ timer ⏲ 📻 29
🍉

🌮 🎶 represents an audio sample. 🌮
🌍 🐇 🎶 🍇
  🌮
    Loads the sample from the file at the given path. Depending on what
    libraries are available, the full set of recognised extensions is: .wav,
    .flac, .ogg, .it, .mod, .s3m, .xm.
  🌮
  🐈 🚨🥓 📄 path 🔡 📻 30
  🌮 Starts playing the sample. 🌮
  🐖 🏁 volume 🚀 pan 🚀 speed 🚀 📻 31
🍉

🌮
  📺 represents a display.

  All drawing operations end up being visible on a display which is the same as
  a window in windowed environments. Thus, before anything is displayed, a
  display needs to be created.
🌮
🌍 🐇 📺 🍇
  🌮 Creates a display with the given width and height. 🌮
  🐈 🆕 width 🚂 height 🚂 📻 32
  🌮 Sets the the title of the window. 🌮
  🐖 🏷 title 🔡 📻 33
🍉

🌮
  🏔 represents the application.
🌮
🌍 🐇 🏔 🍇
  🌮
    You must call this method before using any of the other methods as it
    initializes the system. The callback will be called and passed an instance
    of 🏔 once the application is ready.
  🌮
  🐇🐖 🙋 main 🍇🏔🍉 📻 1

  🌮
    *Flips* the drawing target display. Copies or updates the front and back
    buffers so that what has been drawn previously on the drawing target display
    becomes visible on screen.
  🌮
  🐖 🎦 📻 2

  🌮 Sets *bitmap* as the current drawing target. 🌮
  🐖 🏓 bitmap 🖼 📻 3

  🌮
    Sets the bitmap acting as backbuffer of *display* as the current drawing
    target.
  🌮
  🐖 🏏 display 📺 📻 4

  🌮 Fills the entire drawing target with the given color. 🌮
  🐖 🚿 color 🎨 📻 5

  🌮
    Draws a line between the two points ((*x1*|*y1*) and (*x2*|*y2*)).
  🌮
  🐖 🖍 x1 🚀 y1 🚀 x2 🚀 y2 🚀 thickness 🚀 color 🎨 📻 6

  🌮
    Draws an outlined triangle between the given three points ((*x1*|*y1*),
    (*x2*|*y2*) and (*x3*|*y3*)).
  🌮
  🐖 📐 x1 🚀 y1 🚀 x2 🚀 y2 🚀 x3 🚀 y3 🚀 thickness 🚀 color 🎨 📻 7

  🌮
    Draws a filled triangle between the given three points ((*x1*|*y1*),
    (*x2*|*y2*) and (*x3*|*y3*)).
  🌮
  🐖 🚩 x1 🚀 y1 🚀 x2 🚀 y2 🚀 x3 🚀 y3 🚀 color 🎨 📻 8

  🌮
    Draws an outlined rectangle between the two points ((*x1*|*y1*) and
    (*x2*|*y2*)) which are the upper left and lower right point of the rectangle
    respectively.
  🌮
  🐖 📋 x1 🚀 y1 🚀 x2 🚀 y2 🚀 thickness 🚀 color 🎨 📻 9

  🌮
    Draws a filled rectangle between the two points ((*x1*|*y1*) and
    (*x2*|*y2*)) which are the upper left and lower right point of the rectangle
    respectively.
  🌮
  🐖 🗄 x1 🚀 y1 🚀 x2 🚀 y2 🚀 color 🎨 📻 10

  🌮
    Draws an outlined circle. The center of the circle is the given point
    ((*x1*|*y1*) and the radius is *r*.
  🌮
  🐖 ⚽️ x1 🚀 y1 🚀 r 🚀 thickness 🚀 color 🎨 📻 11

  🌮
    Draws a filled circle. The center of the circle is the given point
    (*x1*|*y1*) and the radius is *r*.
  🌮
  🐖 🏀 x1 🚀 y1 🚀 r 🚀 color 🎨 📻 12

  🌮
    Draws an outlined rectangle with rounded corners between the two points
    ((*x1*|*y1*) and (*x2*|*y2*)) which are the upper left and lower right point
    of the rectangle respectively.
  🌮
  🐖 🏉 x1 🚀 y1 🚀 x2 🚀 y2 🚀 rx 🚀 ry 🚀 thickness 🚀 color 🎨 📻 13

  🌮
    Draws a filled rectangle with rounded corners between the two points
    ((*x1*|*y1*) and (*x2*|*y2*)) which are the upper left and lower right point
    of the rectangle respectively.
  🌮
  🐖 🏈 x1 🚀 y1 🚀 x2 🚀 y2 🚀 rx 🚀 ry 🚀 color 🎨 📻 14

  🌮
    Draws the given bitmap at the given location.
  🌮
  🐖 📼 bitmap 🖼 dx 🚀 dy 🚀 📻 15

  🌮
    Draws a scaled and cropped version of the given bitmap at the given
    location.
  🌮
  🐖 💽 bitmap 🖼 sx 🚀 sy 🚀 sw 🚀 sh 🚀 dx 🚀 dy 🚀 dw 🚀 dh 🚀 📻 16

  🌮
    Draws the given text at the given position in the given font and color.
  🌮
  🐖 🔡 font 🕉 text 🔡 x 🚀 y 🚀 align ⚖ color 🎨 📻 17
🍉
