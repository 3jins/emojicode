📗
  The s package is Emojicode’s standard library.
📗
🔮 1 0

📗
  Boolean
📗
🌍 🕊 👌 ⚪️ 🍇
  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 👌 ➡️ 👌
  📗 Logical and. Returns true if both, the receiver and other, are true. 📗
  🤝 other 👌 ➡️ 👌
  📗 Logical or. Returns true if the receiver or other or both are true. 📗
  👐 other 👌 ➡️ 👌
  📗
    Inverts the boolean. Returns true if the boolean is false, and false if the
    boolean is true.
  📗
  ❗️ ❎ ➡️ 👌
🍉

📗
  A type conforming to this protocol provides a method 😛 to determine whether
  one of its instance is equal to an instance of type T, where T is normally the
  type itself.
📗
🌍 🐊 😛🐚T ⚪️ 🍇
  📗 Whether this value and *other* are equal. 📗
  🙌 other T ➡️ 👌
🍉

🐋 👌 🍇
  🐊 😛🐚👌
🍉

📗
  Integer
📗
🌍 🕊 🔢 ⚪️ 🍇
  🐊 😛🐚🔢

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 🔢 ➡️ 👌
  📗 Returns the receiver minus *other*. 📗
  ➖ other 🔢 ➡️ 🔢
  📗 Returns the receiver plus *other*. 📗
  ➕ other 🔢 ➡️ 🔢
  📗 Returns the receiver divided by *other*. 📗
  ➗ other 🔢 ➡️ 🔢
  📗 Returns the receiver multiplied by *other*. 📗
  ✖ other 🔢 ➡️ 🔢
  📗 Returns the receiver modulus *other*. 📗
  🚮 other 🔢 ➡️ 🔢
  📗 Returns true if the receiver is smaller than *other*. 📗
  ◀ other 🔢 ➡️ 👌
  📗 Returns true if the receiver is greater than *other*. 📗
  ▶ other 🔢 ➡️ 👌
  📗 Returns true if the receiver is smaller than or equal to *other*. 📗
  ◀🙌 other 🔢 ➡️ 👌
  📗 Returns true if the receiver is greater than or equal to *other*. 📗
  ▶🙌 other 🔢 ➡️ 👌
  📗 Returns this integer AND *other*. 📗
  ⭕ other 🔢 ➡️ 🔢
  📗 Returns this integer OR *other*. 📗
  💢 other 🔢 ➡️ 🔢
  📗 Returns this integer XOR *other*. 📗
  ❌ other 🔢 ➡️ 🔢
  📗 Returns NOT applied to this integer. 📗
  ❗️ 🚫 ➡️ 🔢
  📗 Shifts this integer by *n* bits to the left. 📗
  👈 n 🔢 ➡️ 🔢
  📗 Shifts this integer by *n* bits to the right. 📗
  👉 n 🔢 ➡️ 🔢
  📗 Returns the absolute value of this 🔢. 📗
  ❗️ 🏧 ➡️ 🔢 📻 🔤sIntAbsolute🔤
🍉

📗
  Represents a region in memory
📗
🌍 🕊 🧠 🍇
  🆕size 🔢 
  ❗️ 🐷 🐚☣️T ⚪️ value T offset 🔢  📻 🔤ejcBuiltIn🔤
  ❗️ 🐽 🐚☣️T ⚪️ offset 🔢 ➡️ T 📻 🔤ejcBuiltIn🔤
  ❗️ 🏗 newSize 🔢  📻 🔤ejcMemoryRealloc🔤
  ❗️ 🚜 destinationOffset 🔢 source 🧠 sourceOffset 🔢 bytes 🔢  📻 🔤ejcMemoryMove🔤
  ❗️ ✍ byteValue 🔢 offset 🔢 bytes 🔢  📻 🔤ejcMemorySet🔤
  ❗️ ↔ other 🧠 bytes 🔢 ➡️ 🔢 📻 🔤ejcMemoryCompare🔤
🍉

📗
  Represents a real number.
📗
🌍 🕊 💯 ⚪️ 🍇
  🐊 😛🐚💯

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 💯 ➡️ 👌
  📗 Returns the receiver minus *other*. 📗
  ➖ other 💯 ➡️ 💯
  📗 Returns the receiver plus *other*. 📗
  ➕ other 💯 ➡️ 💯
  📗 Returns the receiver divided by *other*. 📗
  ➗ other 💯 ➡️ 💯
  📗 Returns the receiver multiplied by *other*. 📗
  ✖ other 💯 ➡️ 💯
  📗
    Returns the floating-point remainder of the division operation
    `receiver/other`. This will always be the value of `receiver - n*other` and
    will always have the same sign as the receiver.
  📗
  🚮 other 💯 ➡️ 💯
  📗 Returns true if the receiver is smaller than *other*. 📗
  ◀ other 💯 ➡️ 👌
  📗 Returns true if the receiver is greater than *other*. 📗
  ▶ other 💯 ➡️ 👌
  📗 Returns true if the receiver is smaller than or equal to *other*. 📗
  ◀🙌 other 💯 ➡️ 👌
  📗 Returns true if the receiver is greater than or equal to *other*. 📗
  ▶🙌 other 💯 ➡️ 👌
  📗 Returns the absolute value of this 💯. 📗
  ❗️ 🏧 ➡️ 💯 📻 🔤sRealAbsolute🔤
  📗
    Returns the sine of this 💯.
  📗
  ❗️ 📓 ➡️ 💯 📻 🔤sRealSin🔤
  📗
    Returns the cosine of this 💯.
  📗
  ❗️ 📕 ➡️ 💯 📻 🔤sRealCos🔤
  📗
    Returns the tangent of this 💯.
  📗
  ❗️ 📘 ➡️ 💯 📻 🔤sRealTan🔤
  📗
    Returns the arcsine of this 💯.
  📗
  ❗️ 📔 ➡️ 💯 📻 🔤sRealASin🔤
  📗
    Returns the arccosine of this 💯.
  📗
  ❗️ 📙 ➡️ 💯 📻 🔤sRealACos🔤
  📗
    Returns the arctangent of this 💯.
  📗
  ❗️ 📒 ➡️ 💯 📻 🔤sRealATan🔤
  📗
    Returns this 💯 to the exponent power, that is, base<sup>exponent</sup>.
  📗
  ❗️ 🏂 exponent 💯 ➡️ 💯 📻 🔤sRealPower🔤
  📗
    Returns the positive square root of this 💯.
  📗
  ❗️ ⛷ ➡️ 💯 📻 🔤sRealSqrt🔤
  📗
    Returns the smallest integer greater than or equal to this 💯.
  📗
  ❗️ 🚴 ➡️ 🔢 📻 🔤sRealCeil🔤
  📗
    Returns the largest integer less than or equal to this 💯.
  📗
  ❗️ 🚵 ➡️ 🔢 📻 🔤sRealFloor🔤
  📗
    Returns the value of this 💯 rounded to the nearest integer.

    If the fractional portion of this 💯 is 0.5 or greater, the argument is
    rounded to the next higher integer. If the fractional portion of this 💯 is
    less than 0.5, the argument is rounded to the next lower integer.
  📗
  ❗️ 🏇 ➡️ 🔢 📻 🔤sRealRound🔤
  📗
    Returns the base 2 logarithm of this 💯.
  📗
  ❗️ 🚣 ➡️ 💯 📻 🔤sRealLog2🔤
  📗
    Returns the natural (base ℇ) logarithm of this 💯.
  📗
  ❗️ 🏄 ➡️ 💯 📻 🔤sRealLn🔤
  📗
    Returns an approximation of 𝜋.
  📗
  🐇❗️ 🥧 ➡️ 💯
  📗
    Returns an approximation of 𝜋 divided by 2.
  📗
  🐇❗️ 🏉 ➡️ 💯
  📗
    Returns an approximation of 𝜋 divided by 4.
  📗
  🐇❗️ 🎾 ➡️ 💯
  📗
    Returns an approximation of ℇ (Euler’s number).
  📗
  🐇❗️ 🛎 ➡️ 💯
🍉

📗
  Byte
📗
🌍 🕊 💧 ⚪️ 🍇
  🐊 😛🐚💧

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 💧 ➡️ 👌
  📗 Returns the receiver minus *other*. 📗
  ➖ other 💧 ➡️ 💧
  📗 Returns the receiver plus *other*. 📗
  ➕ other 💧 ➡️ 💧
  📗 Returns the receiver divided by *other*. 📗
  ➗ other 💧 ➡️ 💧
  📗 Returns the receiver multiplied by *other*. 📗
  ✖ other 💧 ➡️ 💧
  📗 Returns the receiver modulus *other*. 📗
  🚮 other 💧 ➡️ 💧
  📗 Returns true if the receiver is smaller than *other*. 📗
  ◀ other 💧 ➡️ 👌
  📗 Returns true if the receiver is greater than *other*. 📗
  ▶ other 💧 ➡️ 👌
  📗 Returns true if the receiver is smaller than or equal to *other*. 📗
  ◀🙌 other 💧 ➡️ 👌
  📗 Returns true if the receiver is greater than or equal to *other*. 📗
  ▶🙌 other 💧 ➡️ 👌
  📗 Returns this integer AND *other*. 📗
  ⭕ other 💧 ➡️ 💧
  📗 Returns this integer OR *other*. 📗
  💢 other 💧 ➡️ 💧
  📗 Returns this integer XOR *other*. 📗
  ❌ other 💧 ➡️ 💧
  📗 Returns NOT applied to this integer. 📗
  ❗️ 🚫 ➡️ 💧
  📗 Shifts this integer by *n* bits to the left. 📗
  👈 n 💧 ➡️ 💧
  📗 Shifts this integer by *n* bits to the right. 📗
  👉 n 💧 ➡️ 💧
🍉

📗
  Symbol
📗
🌍 🕊 🔣 ⚪️ 🍇
  🐊 😛🐚🔣

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 🔣 ➡️ 👌
  📗 Whether this symbol represents a whitespace. 📗
  ❗️ 🐁 ➡️ 👌
🍉

📗
  The 🔡 class represents a string. [Read more in the language reference.](../../reference/the-s-package.html#-strings)
📗
🌍 🐇 🔡 🍇
  🍰 codePoints 🧠
  🍰 count 🔢
🍉

📗
  The 🍨 class represents an ordered mutable collection. [Read more in the
  language reference.](../../reference/the-s-package.html#-lists)
📗
🌍 🐇 🍨🐚Element ⚪️ 🍇
  🍰 data 🧠
  🍰 count 🔢
  🍰 size 🔢
🍉

📗 📇 is an abstract interface to binary data. 📗
🌍 🐇 📇 🍇
  🍰 data 🧠
  🍰 count 🔢
🍉

📗
  The 🍯 class represents a dictionary. [Read more in the
  language reference.](../../reference/the-s-package.html#-dictionaries)
📗
🌍 🐇 🍯🐚Element ⚪️ 🍇
🍉

📗
  🍡 can enumerate a collection and generates elements from the object it
  enumerates.

  To get the items from an iterator call the 🔽 method on it, until 🔽❓ returns
  👎 which indicates that there are no more items.
📗
🌍 🐊 🍡🐚Element ⚪️ 🍇
  📗
    Returns the next object. Expect undefined behavior if you call this method
    when ❓ previously returned 👎.
  📗
  ❗️ 🔽 ➡️ Element
  📗
    Whether the enumerator has more elements to provide.
  📗
  ❓️ 🔽 ➡️ 👌
🍉

📗
  A type whose instances shall be enumerable using the 🔂 loop must
  implement this protocol.
📗
🌍 🐊 🔂🐚Element ⚪️ 🍇
  📗
    This method must return an instance of a class that conforms to
    [[🍡]] which will be used to enumerate this instance.
  📗
  ❗️ 🍡 ➡️ 🍡🐚Element
🍉

📗
  A class whose elements can be accessed by 🐽. The number of elements must
  be finite and returned by 🐔.
📗
🌍 🐊 🐽🐚Element ⚪️ 🍇
  📗
    Gets the item at `index`. If the index is invalid Nothingness is returned.
  📗
  ❗️ 🐽 index 🔢 ➡️ 🍬Element
  📗 Returns the number of items in the list. 📗
  ❗️ 🐔 ➡️ 🔢
🍉

📗
  Iterator over a 🐽. This class is an iterator that can iterate over
  every type that conforms to the 🐽 protocol.
📗
🌍 🐇 🌳🐚Element ⚪️ 🍇
  🐊 🍡🐚Element
  🐊 🔂🐚Element

  🍰 iteratee 🐽🐚Element
  🍰 index 🔢

  🆕🍼 iteratee 🐽🐚Element 
  ❗️ 🔽 ➡️ Element
  ❓️ 🔽 ➡️ 👌
  ❗️ 🍡 ➡️ 🍡🐚Element
🍉

📗
  Represents a range which per definition is an immutable sequence of
  numbers. [Read more in the
  language reference.](../../reference/the-s-package.html#-ranges)
📗
🌍 🕊 ⏩ 🍇
  🐊 🔂🐚🔢
  🐊 🐽🐚🔢

  🍰 start 🔢
  🍰 stop 🔢
  🍰 step 🔢

  📗
    Creates a range from start to stop.
  📗
  🆕 ⏩ 🍼 start 🔢 🍼 stop 🔢 
  📗
    Creates a range from start to stop with the given step.
  📗
  🆕 ⏭ 🍼 start 🔢 🍼 stop 🔢 🍼 step 🔢 
  📗
    Returns the `n`th element of the range. `n` is only valid if
    `start + step * n` is `>= start` and `< stop`. If `n` is invalid
    Nothingness is returned.
  📗
  ❗️ 🐽 n 🔢 ➡️ 🍬🔢
  📗 Returns the number of numbers in this range. 📗
  ❗️ 🐔 ➡️ 🔢
  📗 Returns an iterator to iterate over the symbols of this string. 📗
  ❗️ 🍡 ➡️ 🌳🐚🔢
🍉

📗
  Iterator over a 🍨. This iterator does *not* unwrap any values retrieved from
  the list and therefore returns optionals. You can use [[🌳]] to have
  optionals automatically unwrapped.
📗
🌍 🐇 🌱🐚Element ⚪️ 🍇
  🐊 🍡🐚🍬Element
  🐊 🔂🐚🍬Element

  🍰 iteratee 🍨🐚Element
  🍰 index 🔢

  🆕🍼 iteratee 🍨🐚Element 
  ❗️ 🔽 ➡️ 🍬Element
  ❓️ 🔽 ➡️ 👌
  📗
    Removes the element last returned by 🔽 from the list. Calling this method
    before having called 🔽 results in undefined behavior.
  📗
  ❗️ 🚯 
  ❗️ 🍡 ➡️ 🍡🐚🍬Element
🍉

🐋 🔢 🍇
  📗
    Creates a string representation of this integer. *base* must be greater than
    or equal to 2 and less than or equal to 35.

    The digits used to represent the integer are
    `0123456789abcdefghijklmnopqrstuvxyz`.
  📗
  ❗️ 🔡 base 🔢 ➡️ 🔡 📻 🔤sIntToString🔤
  📗 Returns the double representation of this integer. 📗
  ❗️ 💯 ➡️ 💯
🍉

🐋 💯 🍇
  📗
    Creates a 🔡 representation of this 💯 and the given precision – the number
    of digits after the decimal separator “.”.
  📗
  ❗️ 🔡 precision 🔢 ➡️ 🔡 📻 🔤sRealToString🔤
🍉

🐋 🔣 🍇
  📗 Returns the Unicode code point of this symbol. 📗
  ❗️ 🔢 ➡️ 🔢 📻 🔤sSymbolToInt🔤
🍉

📗
  🎰 is a pseudo-random number generator. The default implementation relies on
  the Mersenne Twister algorithm.
📗
🌍 📻 🐇 🎰 🍇
  📗
    Creates a new generator and seeds it with a random value, if possible using
    hardware entropy.
  📗
  🆕 📻 🔤sPrngNew🔤
  📗
    Generates an integer. Integers are uniformly distributed on the
    closed interval `[a, b]`.
  📗
  ❗️ 🔢 a 🔢 b 🔢 ➡️ 🔢 📻 🔤sPrngGetInteger🔤
  📗
    Generates a real, where reals are uniformly distributed on the interval
    `[0, 1)`.
  📗
  ❗️ 💯 ➡️ 💯 📻 🔤sPrngGetReal🔤
🍉

🐋 🔡 🍇
  🐊 🔂🐚🔣
  🐊 🐽🐚🔣
  🐊 😛🐚🔡

  📗 Creates a string by copying the memory from the given memory. 📗
  🆕 🧠 memory 🧠 🍼 count 🔢 
  📗 Creates a string from the provided list of symbols. 📗
  🆕 🎙 symbolList 🍨🐚🔣 
  ❗️ 🧠 ➡️ 🧠
  📗 Puts this 🔡 to the standard output. 📗
  ❗️ 😀  📻 🔤sStringPrint🔤
  📗 Returns 👍 if this 🔡 is equal to b. 📗
  🙌 b 🔡 ➡️ 👌
  📗
    Compares this string to `b` and returns -1, 0, or 1 depending on whether
    this string is less than, equal to, or greater than `b`.

    >!N Note that this method compares the strings byte per byte
    >!N and is only meant for use with non-localized sorting. The results of
    >!N the sort will always be the same, but may not appear logical to human
    >!N beings.
  📗
  ❗️ ↔ b 🔡 ➡️ 🔢
  📗
    Returns the characters in a string beginning at the specified location
    through the specified number of characters.
  📗
  ❗️ 🔪 from 🔢 length 🔢 ➡️ 🔡
  📗
    Finds the first occurrences of a string in this string. Search is
    performed from left to right.

    Returns the index of the first occurrence or no value if `search` does not
    occur.
  📗
  ❗️ 🔍 search 🔡 ➡️ 🍬🔢 📻 🔤sStringFind🔤
  📗
    Finds the first occurrences of a string in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵‍♀ search 🔡 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindFromIndex🔤
  📗 Whether this strings begins with another string. 📗
  ❗️ 🎼 testString 🔡 ➡️ 👌 📻 🔤sStringBeginsWith🔤
  📗 Whether this strings ends with another string. 📗
  ❗️ ⛳ testString 🔡 ➡️ 👌 📻 🔤sStringEndsWith🔤
  📗
    Finds the first occurrences of a symbol in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵‍♂ search 🔣 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindSymbolFromIndex🔤
  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.
  📗
  ❗️ 🔫 separator 🔡 ➡️ 🍨🐚🔡
  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.

    Prefer this method over `🔫` if the separator is just a single character.
  📗
  ❗️ 💣 separator 🔣 ➡️ 🍨🐚🔡
  📗
    The 🔧 method returns a new string, on which whitespace has been removed
    from both ends of a string.
  📗
  ❗️ 🔧 ➡️ 🔡
  📗
    This method returns the number of Unicode code points of this string. This
    is possibly not the number of bytes needed to write the string to a file,
    since Emojicode encodes everything into UTF8.
  📗
  ❗️ 🐔 ➡️ 🔢
  📗
    Returns the number of bytes needed to encode this string into proper UTF8.
  📗
  ❗️ 📐 ➡️ 🔢 📻 🔤sStringUtf8ByteCount🔤
  📗 Creates a new string by appending *symbol*. 📗
  ❗️ 📝 symbol 🔣 ➡️ 🔡 📻 🔤sStringAppendSymbol🔤
  📗 Gets a symbol by its index. 📗
  ❗️ 🐽 index 🔢 ➡️ 🍬🔣
  📗 Returns an array with the symbols from this string. 📗
  ❗️ 🎶 ➡️ 🍨🐚🔣
  📗
    Returns a new string in which at least all letters contained in ASCII
    were converted to uppercase.
  📗
  ❗️ 📫 ➡️ 🔡 📻 🔤sStringToUppercase🔤
  📗
    Returns a new string in which at least all letters contained in ASCII
    were converted to lowercase.
  📗
  ❗️ 📪 ➡️ 🔡 📻 🔤sStringToLowercase🔤
  📗 Returns an iterator to iterate over the symbols of this string. 📗
  ❗️ 🍡 ➡️ 🌳🐚🔣
🍉

🐋 🔣 🍇
  📗 Creates a 🔡 from this symbol. 📗
  ❗️ 🔡 ➡️ 🔡
🍉

🌍 🐇 🔠 🍇
  🍰 data 🧠
  🍰 count 🔢
  🍰 size 🔢

  🆕
  🆕 🐧 capacity 🔢 
  ❗️ 🐻 string 🔡 
  ❗️ 🧠 ➡️ 🧠
  ❗️ 🐔 ➡️ 🔢
  ❗️ 🔡 ➡️ 🔡
🍉

🐋 🔡 🍇
  📗
    Creates a string by joining all elements into a string separated
    by *separator*.
  📗
  🆕 🍨 list 🍨🐚🔡 separator 🔡 
🍉

🐋 🍨 🍇
  🐊 🔂🐚Element
  🐊 🐽🐚Element

  📗 Creates an empty list. 📗
  🆕 🐸 
  📗 Creates an empty list with the given initial capacity. 📗
  🆕 🐴 capacity 🔢 
  📗 Creates an containing the specified number of a single, repeated value. 📗
  🆕 🦊 repeatedValue Element 🍼 count 🔢 
  📗 Creates a shallow copy of the given list. 📗
  🆕 🐮 list 🍨🐚Element 
  🔒❗️ 🧠 ➡️ 🧠
  🔒❗️ ↕ 
  📗 Appends `item` to the end of the list in `O(1)`. 📗
  ❗️ 🐻 item Element 
  📗
    Gets the item at `index` in `O(1)`. If the index is invalid no value is
    returned.
  📗
  ❗️ 🐽 index 🔢 ➡️ 🍬Element
  📗
    Sets `value` at `index`. `index` must be less than [[🐔❗️]].
  📗
  ❗️ 🐷 index 🔢 value Element 
  📗
    Removes the item at `index` and shifts all following items to the left in
    `O(count - index)`.

    Returns 👍 unless the index is out of range.
 📗
  ❗️ 🐨 index 🔢 ➡️ 👌
  📗
    Inserts the given values before the element with the given index.

    All items beginning from `index` are shifted to the right and `item` is
    then inserted at `index`. Complexity: `O(count - index)`.
 📗
  ❗️ 🐵 index 🔢 item Element ➡️ 👌
  📗 Returns the number of items in the list. 📗
  ❗️ 🐔 ➡️ 🔢
  ❗️ 🦍 ➡️ 🔢
  📗 Appends the content of `list` to this list. 📗
  ❗️ 🐥 list 🍨🐚Element 
  📗
    Removes the last item from the list and returns it in `O(1)`.
    If the list is empty ✨ is returned.
  📗
  ❗️ 🐼 ➡️ 🍬Element
  📗
    Removes all elements from the list but keeps the list’s capacity.

    This can be much more efficient than using a new list. Complexity: `O(1)`.
  📗
  ❗️ 🐗 
  📗
    Ensures that the list is large enoguh to store at least `capacity` elements.

    You should use this method if you plan to heavily use 🐷 with large indices
    in order to avoid automatic, useless allocations.

    Complexity: `O(1)`.
  📗
  ❗️ 🐴 capacity 🔢 
  📗
    Shuffles the list in place using a Fisher–Yates shuffle.
  📗
  ❗️ 🐹 
  📗
    Calls callback with each element in the list and appends the returned
    value to the end of a new list.
  📗
  ❗️ 🐰 🐚A ⚪️ callback 🍇Element➡️A🍉 ➡️ 🍨🐚A
  📗
    Returns a new array with all elements that pass the test implemented by
    `callback`.
  📗
  ❗️ 🐭 callback 🍇Element➡️👌🍉 ➡️ 🍨🐚Element
  📗
    Tests whether all elements in the array pass the test implemented by
    `callback`.

    The method immdiately returns 👎 if `callback` returned 👎 for one element.
  📗
  ❗️ 🐯 callback 🍇Element➡️👌🍉 ➡️ 👌
  📗 Returns an iterator to iterate over the elements of this list. 📗
  ❗️ 🍡 ➡️ 🌳🐚Element
🍉

🐋 📇 🍇
  🐊 🐽🐚💧
  🐊 🔂🐚💧
  🐊 😛🐚📇

  📗 Creates a string by copying the memory from the provided memory. 📗
  🆕 🧠 memory 🧠 🍼 count 🔢 
  ❗️ 🧠 ➡️ 🧠
  📗 Returns 👍 if this is equal to b. 📗
  🙌 b 📇 ➡️ 👌
  📗 Returns the number of bytes represented by this instance. 📗
  ❗️ 🐔 ➡️ 🔢
  📗
    Returns the value of the byte at *index*.

    No value is returned if the index is out of range.
  📗
  ❗️ 🐽 index 🔢 ➡️ 🍬💧
  📗
    If this object represents the bytes of a UTF8 encoded text this method
    returns a string representing that text. Nothingness is returned if this
    object does not represent a valid UTF8 sequence.
  📗
  ❗️ 🔡 ➡️ 🍬🔡 📻 🔤sDataAsString🔤
  📗
    Returns a copy of the data within the given range. This method employes
    various techniques to make this as efficient as possible.
  📗
  ❗️ 🔪 from 🔢 length 🔢 ➡️ 📇
  📗
    Finds the first occurrences of *search* in the bytes represented by this
    instance. Search is done from left to right. No value is returned if
    *search* cannot be found. 0 is returned if *search* is empty.
  📗
  ❗️ 🔍 search 📇 offset 🔢 ➡️ 🍬🔢 📻 🔤sDataFindFromIndex🔤
  📗
    Creates a new data object by with the bytes of this instance and *b*
    concatenated.
  📗
  ➕ b 📇 ➡️ 📇
  📗 Returns an iterator to iterate over the bytes of this data object. 📗
  ❗️ 🍡 ➡️ 🌳🐚💧
🍉

📗
  💻 provides several class methods that can be used to interact with the
  operating system. It cannot be instantiated.
📗
🌍 🐇 💻 🍇
  📗
    Gets an environment variable by its name. If the variable cannot be found
    ✨ is returned.
  📗
  🐇❗️ 🌳 variableName 🔡 ➡️ 🍬🔡 📻 🔤sSystemGetEnv🔤
  📗
    Immediately exits the program with the given status code. The code may
    not be larger than 255 on most operating systems.
  📗
  🐇❗️ 🚪 status 🔢  📻 🔤sSystemExit🔤
  📗
    Returns the current time in seconds since the Epoch in Greenwich Mean Time.
  📗
  🐇❗️ 🕰 ➡️ 🔢 📻 🔤sSystemUnixTimestamp🔤
🍉

📗
  Represents an execution thread of the program.
📗
🌍 📻 🐇 💈 🍇
  📗
    Creates an new thread and calls the given callable `callable` on the newly
    created thread.
  📗
  🆕callable 🍇🍉  📻 🔤sThreadNew🔤
  📗
    Blocks the calling thread until this thread has finished work.
  📗
  ❗️ 🛂  📻 🔤sThreadJoin🔤
  📗
    Suspends the calling thread from execution for at least the number of
    microseconds specified by the argument *microseconds*.
  📗
  🐇❗️ ⏲ microseconds 🔢  📻 🔤sThreadDelay🔤
🍉

📗
  🔐 represents a mutex. A mutex is a simple semaphore that can be used to
  coordinate access to shared data from multiple concurrent threads.
📗
🌍 📻 🐇 🔐 🍇
  📗
    Creates an new mutex.
  📗
  🆕 📻 🔤sMutexNew🔤
  📗
    Attempts to lock the mutex and waits until it becomes available if it is
    already locked.
  📗
  ❗️ 🔒  📻 🔤sMutexLock🔤
  📗
    Unlocks the mutex.
  📗
  ❗️ 🔓  📻 🔤sMutexUnlock🔤
  📗
    Attempts to lock the mutex and returns immediately. Returns 👍 if the mutex
    could be locked.
  📗
  ❗️ 🔐 ➡️ 👌 📻 🔤sMutexTryLock🔤
🍉

