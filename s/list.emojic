📗
  List, an ordered mutable collection.

  [Read more in the
  language reference.](../../reference/the-s-package.html#-lists)
📗
🌍 🐇 🍨🐚Element ⚪🍆️ 🍇
  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 size 🔢

  🐊 🔂🐚Element🍆
  🐊 🐽🐚Element🍆

  📗 Creates an empty list. 📗
  🆕 🐸 🍇
    0 ➡️ 🖍count
    10 ➡️ 🖍size
    ☣️ 🍇
      🆕🧠🆕 10✖️⚖️Element❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Creates an empty list with the given initial capacity. 📗
  🆕 🐴 capacity 🔢 🍇
    0 ➡️ 🖍count
    capacity ➡️ 🖍size
    ☣️ 🍇
      🆕🧠🆕 capacity✖️⚖️Element❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Creates an containing the specified number of a single, repeated value. 📗
  🆕 🦊 repeatedValue Element 🍼 count 🔢 🍇
    count ➡️ 🖍size
    ☣️ 🍇
      🆕🧠🆕 size✖️⚖️Element❗️ ➡️ 🖍data

      🔂 i 🆕⏩⏩ 0 count❗️ 🍇
        🐷 data🐚Element🍆 repeatedValue i✖️⚖️Element❗️
      🍉
    🍉
  🍉

  🔒❗️🧠 ➡️ 🧠 🍇
    ↩️ data
  🍉

  🔒❗️ ↕️ 🍇
    ↪️ size 🙌 count 🍇
      size ⬅️✖️ 2
      ☣️ 🍇
        🏗 data size✖️⚖️Element❗️
      🍉
    🍉
  🍉

  📗 Creates a shallow copy of the given list. 📗
  🆕 🐮 list 🍨🐚Element🍆 🍇
    🐔list❗️ ➡️ 🖍count
    🐴list❓ ➡️ 🖍size
    ☣️ 🍇
      🆕🧠🆕 size✖️⚖️Element❗️ ➡️ 🖍data
      🚜 data 0 🧠list❗️ 0 size✖️⚖️Element❗️
    🍉
  🍉

  📗 Appends `item` to the end of the list in `O(1)`. 📗
  ❗️ 🐻 item Element 🍇
    ↕️🐕❗️
    ☣️ 🍇
      🐷 data🐚Element🍆 item count✖️⚖️Element❗️
    🍉
    count ⬅️➕ 1
  🍉

  📗
    Gets the item at *index* in `O(1)`. *index* must be greater than 0 and less
    than [[🐔❗️]] or the program will panic.
  📗
  ❗️ 🐽 index 🔢 ➡️ Element 🍇
    ↪️ index ▶️🙌 count 👐 index ◀️ 0 🍇
      🤯🐇💻 🔤Index out of bounds in 🍨🐽🔤 ❗️
    🍉
    ☣️ 🍇
      ↩️ 🐽 data🐚Element🍆 index✖️⚖️Element❗️
    🍉
  🍉

  📗
    Sets *value* at *index*. *index* must be greater than 0 and less
    than [[🐔❗️]] or the program will panic.
  📗
  ❗️ 🐷 index 🔢 value Element 🍇
    ↪️ index ▶️🙌 count 👐 index ◀️ 0 🍇
      🤯🐇💻 🔤Index out of bounds in 🍨🐷❗️🔤 ❗️
    🍉
    ☣️ 🍇
      ♻️ data🐚Element🍆 index✖️⚖️Element❗️
      🐷 data🐚Element🍆 value index✖️⚖️Element❗️
    🍉
  🍉

 📗
    Removes the item at `index` and shifts all following items to the left in
    `O(n)`.

    Returns 👍 unless the index is out of range.
 📗
 ❗️ 🐨 index 🔢 ➡️ 👌 🍇
    ↪️ index ◀️ count 🍇
      ☣️ 🍇
        ♻️ data🐚Element🍆 index✖️⚖️Element❗️
        🚜 data index✖️⚖️Element data 🤜index ➕ 1🤛✖️⚖️Element 🤜count ➖ 🤜index ➕ 1🤛🤛✖️⚖️Element❗️
      🍉
      count ⬅️➖ 1
      ↩️ 👍
    🍉
    ↩️ 👎
  🍉

 📗
    Inserts the given values before the element with the given index.

    All items beginning from `index` are shifted to the right and `item` is
    then inserted at `index`. Complexity: `O(n)`.
 📗
 ❗️ 🐵 index 🔢 item Element ➡️ 👌 🍇
    ↕️🐕❗️
    ↪️ index ◀️ count 🍇
      ☣️ 🍇
        🚜 data 🤜index ➕ 1🤛✖️⚖️Element data index✖️⚖️Element 🤜count ➖ index 🤛✖️⚖️Element❗️
        🐷 data🐚Element🍆 item index✖️⚖️Element❗️
      🍉
      count ⬅️➕ 1
      ↩️ 👍
    🍉
    ↩️ 👎
  🍉

  📗 Returns the number of items in the list. 📗
  ❗️ 🐔 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗 Appends the content of `list` to this list. Complexity: `O(n)`. 📗
  ❗️ 🐥 list 🍨🐚Element🍆 🍇
    count ➡️ oldCount
    count ⬅️➕ 🐔list❗️
    🐴🐕 count❗️
    ☣️ 🍇
      🚜 data oldCount✖️⚖️Element 🧠list❗️ 0 🐔list❗️✖️⚖️Element❗️
    🍉
  🍉

  📗
    Removes the last item from the list and returns it in `O(1)`.
    If the list is empty ✨ is returned.
  📗
  ❗️ 🐼 ➡️ 🍬Element 🍇
    count ⬅️➖ 1
    ☣️ 🍇
      🐽 data🐚Element🍆 count✖️⚖️Element❗️ ➡️ value
      ♻️ data🐚Element🍆 count✖️⚖️Element❗️
    🍉
    ↩️ value
  🍉

  📗
    Removes all elements from the list but keeps the list’s capacity.

    This can be much more efficient than using a new list. Complexity: `O(1)`.
  📗
  ❗️ 🐗 🍇
    ☣️ 🍇
      ♻️ 🐕❗️
    🍉
    0 ➡️ 🖍count
  🍉

  📗 Releases everything inside the list. 📗
  ☣️🔒❗️♻️ 🍇
    🔂 i 🆕⏩⏩ 0 count❗️ 🍇
      ♻️ data🐚Element🍆 i✖️⚖️Element❗️
    🍉
  🍉

  ♻️ 🍇
    ☣️ 🍇
      ♻️ 🐕❗️
    🍉
  🍉

  📗
    Ensures that the list is large enoguh to store at least `capacity` elements.

    You should use this method if you plan to heavily use 🐷 with large indices
    in order to avoid automatic, useless allocations.

    Complexity: `O(n)`.
  📗
  ❗️ 🐴 capacity 🔢 🍇
    ↪️ capacity ▶️ size 🍇
      capacity ➡️ 🖍size
      ☣️ 🍇
        🏗 data size✖️⚖️Element❗️
      🍉
    🍉
  🍉

  📗 Returns the lists current capacity. 📗
  ❓ 🐴 ➡️ 🔢 🍇
    ↩️ size
  🍉

  📗
    Sorts this array in place using the quick sort algorithm.

    `comparator` must return an integer less than, equal to, or greater than 0,
    if the first argument is considered respectively less than, equal to, or
    greater than the second.
  📗
  ❗️ 🦁 comparator 🍇Element Element➡️🔢🍉 🍇
    🥃🐕 0 🐔🐕❗️ ➖ 1 comparator❗️
  🍉

  🔒❗️✂️ first 🔢 last 🔢 comparator 🍇Element Element➡️🔢🍉 ➡️ 🔢 🍇
    ☣️ 🍇
      🐽 data🐚Element🍆 first✖️⚖️Element❗️  ➡️ pivot
    🍉

    first ➖ 1 ➡️🖍🆕i
    last ➕ 1 ➡️🖍🆕j

    🔁 👍 🍇
      i ⬅️➕ 1
      ☣️ 🍇
        🔁 ⁉️comparator 🐽 data🐚Element🍆 i✖️⚖️Element❗️ pivot❗️ ◀️ 0 🍇
          i ⬅️➕ 1
        🍉
      🍉

      j ⬅️➖ 1
      ☣️ 🍇
        🔁 ⁉️comparator 🐽 data🐚Element🍆 j✖️⚖️Element❗️ pivot❗️ ▶️ 0 🍇
          j ⬅️➖ 1
        🍉
      🍉

      ↪️ i ▶️🙌 j 🍇
        ↩️ j
      🍉

      ☣️ 🍇
        🔄🐕 i j❗️
      🍉
    🍉
    ↩️ 0
  🍉

  🔒❗️🥃 first 🔢 last 🔢 comparator 🍇Element Element➡️🔢🍉 🍇
    ↪️ first ◀️ last 🍇
      ✂️🐕 first last comparator❗️ ➡️ p
      🥃🐕 first p comparator❗️
      🥃🐕 p ➕ 1 last comparator❗️
    🍉
  🍉

  ☣️🔒❗🔄 a 🔢 b 🔢 🍇
    🐽 data🐚Element🍆 a✖️⚖️Element❗️ ➡️ temp
    🐷 data🐚Element🍆 🐽 data🐚Element🍆 b✖️⚖️Element❗️ a✖️⚖️Element❗️
    🐷 data🐚Element🍆 temp b✖️⚖️Element❗️
  🍉

  📗
    Shuffles the list in place using a Fisher–Yates shuffle.
  📗
  ❗️ 🐹 🍇
    🆕🎰🆕❗️ ➡️ prng

    🔂 i 🆕⏩⏩ 0 count❗️ 🍇
      🔢 prng 0 count ➖ 1❗️ ➡️ x

      ☣️ 🍇
        🔄🐕 i x❗️
      🍉
    🍉
  🍉

  📗
    Calls callback with each element in the list and appends the returned
    value to the end of a new list.
  📗
  ❗️ 🐰 🐚A⚪🍆️ callback 🍇Element➡️A🍉 ➡️ 🍨🐚A🍆 🍇
    🆕🍨🐚A🍆🐴 🐔 🐕❗️❗️ ➡️ g
    🔂 element 🐕 🍇
      🐻 g ⁉️callback element❗️❗️
    🍉
    ↩️ g
  🍉

  📗
    Returns a new array with all elements that pass the test implemented by
    `callback`.
  📗
  ❗️ 🐭 callback 🍇Element➡️👌🍉 ➡️ 🍨🐚Element🍆 🍇
    🆕🍨🐚Element🍆🐸❗️ ➡️ g
    🔂 element 🐕 🍇
      ↪️ ⁉️ callback element❗️ 🍇
        🐻 g element❗️
      🍉
    🍉
    ↩️ g
  🍉

  📗
    Tests whether all elements in the array pass the test implemented by
    `callback`.

    The method immdiately returns 👎 if `callback` returned 👎 for one element.
  📗
  ❗️ 🐯 callback 🍇Element➡️👌🍉 ➡️ 👌 🍇
    🔂 element 🐕 🍇
      ↪️ ❎ ⁉️callback element❗️ ❗️ 🍇
        ↩️ 👎
      🍉
    🍉
    ↩️ 👍
  🍉

  📗 Tests whether this array and `other` are equal. 📗
  🙌 🐚A😛🐚Element🍆🍆 other 🍨🐚A🍆 ➡️ 👌 🍇
    ↪️ ❎ 🐔 🐕❗️ 🙌 🐔 other❗️ ❗️ 🍇
      ↩️ 👎
    🍉

    💭🔜
    🔂 i 🆕⏩⏩  0 🐔🐕❗️ ❗️ 🍇
      ↪️ ❎ 🐽 other i❗️ 🙌 🐽 🐕  i❗️ ❗️ 🍇
        ↩️ 👎
      🍉
    🍉🔚💭
    ↩️ 👍
  🍉

  📗 Returns an iterator to iterate over the elements of this list. 📗
  ❗️ 🍡 ➡️ 🌳🐚Element🍆 🍇
    ↩️ 🆕⚫️🆕 🐕❗️
  🍉
🍉
