🐋 🔡 🍇
👴   🐊 🔂🐚🔣
👴   🐊 🐽🐚🔣
  🐊 😛🐚🔡

👴   📗 Prompts the user for input. (via the standard input/output) 📗
👴   🆕 😯 prompt 🔡 📻 🔤sStringPrompt🔤

👴   📗 Creates a string from the given list of symbols. 📗
👴   🆕 🎙 symbolList 🍨🐚🔣 📻 🔤sStringFromSymbolArray🔤

👴   📗
👴     Creates a string by joining all elements into a string sepearted
👴     by *separator*.
👴   📗
👴   🆕 🍨 list 🍨🐚🔡 separator 🔡 📻 🔤sStringJoin🔤

  📗 Puts this 🔡 to the standard output. 📗
  ❗️ 😀 📻 🔤sStringPrint🔤

  📗 Returns 👍 if this 🔡 is equal to b. 📗
  🙌 b 🔡 ➡️ 👌📻 🔤sStringEqual🔤

  📗
    Compares this string to `b` and returns -1, 0, or 1 depending on whether
    this string is less than, equal to, or greater than `b`.

    >!N Note that this method compares the strings byte per byte
    >!N and is only meant for use with non-localized sorting. The results of
    >!N the sort will always be the same, but may not appear logical to human
    >!N beings.
  📗
  ❗️ ↔️ b 🔡 ➡️ 🔢 📻 🔤sStringCompare🔤

  👴 📗
  👴   Returns the characters in a string beginning at the specified location
  👴   through the specified number of characters.

  👴   from: Location at which to begin extracting characters. If a negative number
  👴   is given, it is treated as strLength + start where strLength = to the length
  👴   of the string (for example, if start is -3 it is treated as strLength - 3.)
  👴 📗
  👴 ❗️ 🔪 from 🔢 length 🔢 ➡️ 🔡 📻 🔤sStringSubstring🔤

  👴 📗
  👴   Finds the first occurrences of a string in this string. Search is done from
  👴   left to right. Nothingness is returned if *search* cannot be found.
  👴 📗
  👴 ❗️ 🔍 search 🔡 ➡️ 🍬🔢 📻 🔤sStringFind🔤

  📗 Whether this strings begins with another string. 📗
  ❗️ 🎼 testString 🔡 ➡️ 👌 📻 🔤sStringBeginsWith🔤

  📗 Whether this strings ends with another string. 📗
  ❗️ ⛳️ testString 🔡 ➡️ 👌 📻 🔤sStringEndsWith🔤

  👴 📗
  👴   The 🔧 method returns a new string, on which whitespace has been removed
  👴   from both ends of a string.
  👴 📗
  👴 ❗️ 🔧 ➡️ 🔡 📻 🔤sStringTrim🔤

  👴 📗
  👴   This string is split up into substring at each place *seperator* is found.
  👴   *seperator* itself is removed from the string.
  👴 📗
  👴 ❗️ 🔫 separator 🔡 ➡️ 🍨🐚🔡 📻 🔤sStringSplitString🔤

  👴 📗
  👴   This string is split up into substring at each place *seperator* is found.
  👴   *seperator* itself is removed from the string.

  👴   Prefer this method over `🔫` if the separator is just a single character.
  👴 📗
  👴 ❗️ 💣 separator 🔣 ➡️ 🍨🐚🔡 📻 🔤sStringSplitSymbol🔤

  📗
    This method returns the number of Unicode code points of this string. This
    is possibly not the number of bytes needed to write the string to a file,
    since Emojicode encodes everything into UTF8.
  📗
  ❗️ 🐔 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗
    Returns the number of bytes needed to encode this string into proper UTF8.
  📗
  ❗️ 📐 ➡️ 🔢 📻 🔤sStringUtf8ByteCount🔤
👴   📗
👴     This methods tries to construct an integer from this string in the given
👴     base. It returns the integer or Nothingness if the string does not match the
👴     regular expression `[+-]?[0-9a-zA-Z]+` or it does not represent a valid
👴     value in the given base.
👴   📗
👴   ❗️ 🔢 base 🔢 ➡️ 🍬🔢 📻 🔤sStringToInt🔤

👴   📗
👴     This methods tries to construct a 🚀 from this 🔡. It returns the 🚀, or ✨
👴     if the 🔡 does not match the regular expression
👴     `[+-]?([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)([eE][+-]?[0-9]+)?`
👴     or if it does not represent a valid 🚀.
👴   📗
👴   ❗️ 🚀 ➡️ 🍬🚀 📻 🔤sStringToFloat🔤

👴   📗 Creates a new string by appending *symbol*. 📗
👴   ❗️ 📝 symbol 🔣 ➡️ 🔡 📻 🔤sStringAppendSymbol🔤

👴   📗 Gets a symbol by its index. 📗
👴   ❗️ 🐽 index 🔢 ➡️ 🍬🔣 📻 🔤sStringToInt🔤

👴   📗 Converts the string to data encoded as UTF8. 📗
👴   ❗️ 📇 ➡️ 📇 📻 🔤sStringToData🔤

👴   📗 Returns an array with the symbols from this string. 📗
👴   ❗️ 🎶 ➡️ 🍨🐚🔣 📻 🔤sStringToList🔤

👴   📗
👴     Tries to parse this string as JSON. If the string doesn’t represent valid
👴     JSON Nothigness is returned. The depth is limited to 256 levels.
👴   📗
👴   ❗️ 📰 ➡️ ⚪️ 📻 🔤sStringParseJson🔤

👴   📗
👴     Returns a new string in which at least all letters contained in ASCII
👴     were converted to uppercase.
👴   📗
👴   ❗️ 📫 ➡️ 🔡 📻 🔤sStringToLowercase🔤

👴   📗
👴     Returns a new string in which at least all letters contained in ASCII
👴     were converted to lowercase.
👴   📗
👴   ❗️ 📪 ➡️ 🔡 📻 🔤sStringToUppercase🔤

👴   📗 Returns an iterator to iterate over the symbols of this string. 📗
👴   ❗️ 🍡 ➡️ 🌳🐚🔣 🍇
👴     ↩️ 🆕🌳🐚🔣🆕 🐕❗️
👴   🍉
👴 🍉

👴 🌍 🐇 🔠 🍇
👴   🍰 symbols 🍨🐚🔣

👴   🆕 🍇
👴     🍮 symbols 🆕🍨🐚🔣🐸❗️
👴   🍉

👴   🆕 🐧 capacity 🔢 🍇
👴     🍮 symbols 🆕🍨🐚🔣🐧  capacity❗️
👴   🍉

👴   ❗️ 🐻 string 🔡 🍇
👴     🐥 symbols 🎶 string❗️❗️
👴   🍉

👴   ❗️ 🔡 ➡️  🔡 🍇
👴     ↩️ 🆕🔡🎙 symbols❗️
👴   🍉
🍉
