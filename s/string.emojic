🐋 🔡 🍇
  🐊 🔂🐚🍬🔣
  🐊 🐽🐚🍬🔣
  🐊 😛🐚🔡

  📗 Creates a string by copying the memory from the *memory*. 📗
  ☣️ 🆕 🧠 memory 🧠 🍼 count 🔢 🍇
    count ✖️⚖️🔣 ➡️ size
    🆕🧠🆕 size❗️ ➡️ 🖍codePoints
    🚜 codePoints 0 memory 0 size❗️
  🍉

  📗 Returns the memory area representing the value of this string. 📗
  ❗️🧠 ➡️ 🧠 🍇
    ↩️ codePoints
  🍉

  📗
    Waits for the user to input a text and confirm it with enter.
    No new line character is included as part of the string.
    (Via the standard input/output)
  📗
  🆕 👂🏼 📻 🔤sStringReadLine🔤

  📗 Creates a string from the provided list of symbols. 📗
  🆕 🎙 symbolList 🍨🐚🔣 🍇
    🐔symbolList❗️ ➡️ 🖍count
    ☣️ 🍇
      🆕🧠🆕 count ✖️⚖️🔣❗️ ➡️ 🖍codePoints

      🔂 i 🆕⏩⏩ 0 count❗️ 🍇
        🐷 codePoints 🐽symbolList i❗️ i ✖️⚖️🔣❗️
      🍉
    🍉
  🍉

  📗 Puts this 🔡 to the standard output. 📗
  ❗️ 😀 📻 🔤sStringPrint🔤

  📗 Puts this 🔡 to the standard output without adding a new line. 📗
  ❗️ 👄 📻 🔤sStringPrintNoLn🔤

  📗 Returns 👍 if this string is equal to *b*. 📗
  🙌 b 🔡 ➡️ 👌 🍇
    ↪️ 🐕 😜 b 🍇
      ↩️ 👍
    🍉
    ↩️ ↔️🐕 b❗️ 🙌 0
  🍉

  📗
    Compares this string to *b* and returns -1, 0, or 1 depending on whether
    this string is less than, equal to, or greater than `b`.

    >!N Note that this method compares the strings byte per byte
    >!N and is only meant for use with non-localized sorting. The results of
    >!N the sort will always be the same, but may not appear logical to human
    >!N beings.
  📗
  ❗️ ↔️ b 🔡 ➡️ 🔢 🍇
    ↪️ 🐔 b❗️ ◀️ count 🍇
      ↩️ -1
    🍉
    ↪️ 🐔 b❗️ ▶️ count 🍇
      ↩️ 1
    🍉

    ☣️ 🍇
      ↩️ ↔️ codePoints 🧠b❗️ count✖️⚖️🔣❗️
    🍉
  🍉

  📗
    Returns the characters in a string beginning at the specified location
    through the specified number of characters.
  📗
  ❗️ 🔪 from 🔢 length 🔢 ➡️ 🔡 🍇
    ↪️ from ▶️️🙌 count 🍇
      ↩️ 🔤🔤
    🍉
    length ➡️ 🖍🆕normal_length
    ↪️ from ➕ length ▶️️🙌 count 🍇
      count ➖ from ➡️ 🖍normal_length
    🍉

    ☣️ 🍇
      🆕🧠🆕 normal_length✖️⚖️🔣❗️ ➡️ new
      🚜 new 0 codePoints from✖️⚖️🔣 normal_length✖️⚖️🔣❗️
      ↩️ 🆕🔡🧠 new normal_length❗️
    🍉
  🍉

  📗
    Finds the first occurrences of *search* in this string. Search is
    performed from left to right.

    Returns the index of the first occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🔍 search 🔡 ➡️ 🍬🔢 📻 🔤sStringFind🔤

  📗
    Finds the first occurrences of a string in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵️‍♀️ search 🔡 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindFromIndex🔤

  📗 Whether this strings begins with another string. 📗
  ❗️ 🎼 testString 🔡 ➡️ 👌 📻 🔤sStringBeginsWith🔤

  📗 Whether this strings ends with another string. 📗
  ❗️ ⛳️ testString 🔡 ➡️ 👌 📻 🔤sStringEndsWith🔤

  📗
    Finds the first occurrences of a symbol in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵️‍♂️ search 🔣 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindSymbolFromIndex🔤

  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.
  📗
  ❗️ 🔫 separator 🔡 ➡️ 🍨🐚🔡 🍇
    🆕🍨🐚🔡🐸❗️ ➡️ list

    0 ➡️ 🖍🆕lastIndex
    👍 ➡️ 🖍🆕continue
    🔁 continue 🍇
      ↪️ 🕵️‍♀️🐕 separator lastIndex❗️ ➡️ newIndex 🍇
        🐻 list 🔪🐕 lastIndex newIndex ➖ lastIndex❗️❗️
        newIndex ➕ 🐔separator❗️ ➡️ 🖍lastIndex
      🍉
      🙅 🍇
        👎 ➡️ 🖍continue
      🍉
    🍉
    🐻 list 🔪🐕 lastIndex  🤜🐔🐕❗️🤛 ➖ lastIndex❗️❗️

    ↩️ list
  🍉

  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.

    Prefer this method over 🔫❗️ if the separator is just a single character.
  📗
  ❗️ 💣 separator 🔣 ➡️ 🍨🐚🔡 🍇
    🆕🍨🐚🔡🐸❗️ ➡️ list

    0 ➡️ 🖍🆕 lastIndex
    👍 ➡️ 🖍🆕 continue
    🔁 continue 🍇
      ↪️ 🕵️‍♂️ 🐕 separator lastIndex❗️➡️ newIndex  🍇
        🐻 list 🔪🐕 lastIndex newIndex ➖ lastIndex❗️❗️
        newIndex ➕ 1 ➡️ 🖍lastIndex
      🍉
      🙅 🍇
        👎 ➡️ 🖍continue
      🍉
    🍉
    🐻 list 🔪🐕 lastIndex  🤜🐔🐕❗️🤛 ➖ lastIndex❗️❗️

    ↩️ list
  🍉

  📗
    The 🔧 method returns a new string, on which whitespace has been removed
    from both ends of a string.
  📗
  ❗️ 🔧 ➡️ 🔡 🍇
    0 ➡️ 🖍🆕 front
    count ➖ 1 ➡️ 🖍🆕 end

    ☣️ 🍇
      🔁 front ◀️ count 🤝 🐁🐽 codePoints 🐚🔣 front ✖️⚖️🔣❗️❗️ 🍇
        front ⬅️➕ 1
      🍉
      🔁 end ▶️ front 🤝 🐁🐽 codePoints 🐚🔣 end ✖️⚖️🔣❗️❗️ 🍇
        end ⬅️➖ 1
      🍉
    🍉

    ↩️ 🔪🐕 front end ➖ front ➕ 1❗️
  🍉

  📗
    This method returns the number of Unicode code points of this string. This
    is possibly not the number of bytes needed to write the string to a file,
    since Emojicode encodes everything into UTF8.
  📗
  ❗️ 🐔 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗
    Returns the number of bytes needed to encode this string into proper UTF8.
  📗
  ❗️ 📐 ➡️ 🔢 📻 🔤sStringUtf8ByteCount🔤

  📗
    This methods tries to construct an integer from this string in the given
    base. It returns the integer or Nothingness if the string does not match the
    regular expression `[+-]?[0-9a-zA-Z]+` or it does not represent a valid
    value in the given base.
  📗
  ❗️ 🔢 base 🔢 ➡️ 🍬🔢 📻 🔤sStringToInt🔤

  📗
    This methods tries to construct a 💯 from this 🔡. It returns the 💯, or ✨
    if the 🔡 does not match the regular expression
    `[+-]?([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)([eE][+-]?[0-9]+)?`
    or if it does not represent a valid 💯.
  📗
  ❗️ 💯 ➡️ 🍬💯 📻 🔤sStringToReal🔤

  📗 Creates a new string by appending *symbol*. 📗
  ❗️ 📝 symbol 🔣 ➡️ 🔡 📻 🔤sStringAppendSymbol🔤

  📗 Gets a symbol by its index. 📗
  ❗️ 🐽 index 🔢 ➡️ 🍬🔣 🍇
    ↪️ index ▶️️🙌 count 🍇
      ↩️ 🤷‍♂️
    🍉
    ☣️ 🍇
      ↩️ 🐽 codePoints 🐚🔣 count ✖️⚖️🔣❗️
    🍉
  🍉

	📗 Converts the string to data encoded as UTF8. 📗
	❗️ 📇 ➡️ 📇 📻 🔤sStringToData🔤

  📗
    Hashes this string.
    The results for strings whose values equal are guaranteed to be the same
    within a process.
  📗
  ❗️ ⚗️ ➡️ 🔢 📻 🔤sStringHash🔤

  📗 Returns an array with the symbols from this string. 📗
  ❗️ 🎶 ➡️ 🍨🐚🔣 🍇
    🆕🍨🐚🔣🐴 count❗️ ➡️ list
    ☣️ 🍇
      🔂 i 🆕⏩⏩ 0 count❗️ 🍇
        🐻 list 🐽 codePoints🐚🔣  i✖️⚖️🔣❗️❗️
      🍉
    🍉
    ↩️ list
  🍉

💭   📗
💭     Tries to parse this string as JSON. If the string doesn’t represent valid
💭     JSON Nothigness is returned. The depth is limited to 256 levels.
💭   📗
💭   ❗️ 📰 ➡️ ⚪️ 📻 🔤sStringParseJson🔤

  📗
    Returns a new string in which at least all letters contained in ASCII
    were converted to uppercase.
  📗
  ❗️ 📫 ➡️ 🔡 📻 🔤sStringToUppercase🔤

  📗
    Returns a new string in which at least all letters contained in ASCII
    were converted to lowercase.
  📗
  ❗️ 📪 ➡️ 🔡 📻 🔤sStringToLowercase🔤

  📗 Returns an iterator to iterate over the symbols of this string. 📗
  ❗️ 🍡 ➡️ 🌳🐚🍬🔣 🍇
    ↩️ 🆕🌳🐚🍬🔣🆕 🐕❗️
  🍉
🍉

🐋 🔣 🍇
  📗 Creates a 🔡 from this symbol. 📗
  ❗️ 🔡 ➡️ 🔡 🍇
    ☣️ 🍇
      🆕🧠🆕 ⚖️🔣❗️ ➡️ data
      🐷 data🐚🔣 🐕 0❗️
      ↩️ 🆕🔡🧠 data 1❗️
    🍉
  🍉
🍉

📗 Mutable sequence of characters (“string builder”). 📗
🌍 🐇 🔠 🍇
  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 size 🔢

  📗 Creates an empty 🔠 with an initial capacity of 16. 📗
  🆕 🍇
    0 ➡️ 🖍count
    16 ➡️ 🖍size
    ☣️ 🍇
      🆕🧠🆕 16✖️⚖️🔣❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Creates an empty 🔠 with the provided *capacity*. 📗
  🆕 🐧 capacity 🔢 🍇
    0 ➡️ 🖍count
    capacity ➡️ 🖍size
    ☣️ 🍇
      🆕🧠🆕 capacity✖️⚖️🔣❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Adds the symbols of *string* to this 🔠. 📗
  ❗️ 🐻 string 🔡 🍇
    🐔string❗️ ➡️ stringSize
    ☣️ 🍇
      ↪️ count ➕ stringSize ▶️ size 🍇
        size ⬅️➕ stringSize
        🏗 data size✖️⚖️🔣❗️
      🍉

      🚜 data count✖️⚖️🔣 🧠 string❗️ 0 stringSize✖️⚖️🔣❗️
      count ⬅️➕ stringSize
    🍉
  🍉

  📗 Returns the memory area representing the data of this 🔠. 📗
  ❗️🧠 ➡️ 🧠 🍇
    ↩️ data
  🍉

  📗 Returns the number of symbols. 📗
  ❗️ 🐔 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗 Returns the value of this this 🔠 as a 🔡. 📗
  ❗️ 🔡 ➡️ 🔡 🍇
    ☣️ 🍇
      ↩️ 🆕🔡🧠 data count❗️
    🍉
  🍉
🍉

🐋 🔡 🍇
  📗
    Creates a string by joining all elements into a string separated
    by *separator*.
  📗
  🆕 🍨 list 🍨🐚🔡 separator 🔡 🍇
    🆕🔠🆕❗️ ➡️ builder
    🔂 i 🆕⏩⏩ 0 🐔list❗️ ❗️  🍇
      🐻 builder 🐽list i❗️ ❗️

      ↪️ i ➕ 1 ◀️ 🐔list❗️ 🍇
        🐻 builder separator❗️
      🍉
    🍉
    🧠builder❗️ ➡️ 🖍codePoints
    🐔builder❗️ ➡️ 🖍count
  🍉
🍉
